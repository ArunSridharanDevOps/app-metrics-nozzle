// This file was generated by counterfeiter
package usageeventsfakes

import (
	"app-metrics-nozzle/usageevents"
	"sync"

	"github.com/cloudfoundry-community/firehose-to-syslog/caching"
)

type FakeAppCaching struct {
	GetAllAppStub        func() []caching.App
	getAllAppMutex       sync.RWMutex
	getAllAppArgsForCall []struct{}
	getAllAppReturns     struct {
		result1 []caching.App
	}
	GetAppInfoStub        func(appGuid string) caching.App
	getAppInfoMutex       sync.RWMutex
	getAppInfoArgsForCall []struct {
		appGuid string
	}
	getAppInfoReturns struct {
		result1 caching.App
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppCaching) GetAllApp() []caching.App {
	fake.getAllAppMutex.Lock()
	fake.getAllAppArgsForCall = append(fake.getAllAppArgsForCall, struct{}{})
	fake.recordInvocation("GetAllApp", []interface{}{})
	fake.getAllAppMutex.Unlock()
	if fake.GetAllAppStub != nil {
		return fake.GetAllAppStub()
	} else {
		return fake.getAllAppReturns.result1
	}
}

func (fake *FakeAppCaching) GetAllAppCallCount() int {
	fake.getAllAppMutex.RLock()
	defer fake.getAllAppMutex.RUnlock()
	return len(fake.getAllAppArgsForCall)
}

func (fake *FakeAppCaching) GetAllAppReturns(result1 []caching.App) {
	fake.GetAllAppStub = nil
	fake.getAllAppReturns = struct {
		result1 []caching.App
	}{result1}
}

func (fake *FakeAppCaching) GetAppInfo(appGuid string) caching.App {
	fake.getAppInfoMutex.Lock()
	fake.getAppInfoArgsForCall = append(fake.getAppInfoArgsForCall, struct {
		appGuid string
	}{appGuid})
	fake.recordInvocation("GetAppInfo", []interface{}{appGuid})
	fake.getAppInfoMutex.Unlock()
	if fake.GetAppInfoStub != nil {
		return fake.GetAppInfoStub(appGuid)
	} else {
		return fake.getAppInfoReturns.result1
	}
}

func (fake *FakeAppCaching) GetAppInfoCallCount() int {
	fake.getAppInfoMutex.RLock()
	defer fake.getAppInfoMutex.RUnlock()
	return len(fake.getAppInfoArgsForCall)
}

func (fake *FakeAppCaching) GetAppInfoArgsForCall(i int) string {
	fake.getAppInfoMutex.RLock()
	defer fake.getAppInfoMutex.RUnlock()
	return fake.getAppInfoArgsForCall[i].appGuid
}

func (fake *FakeAppCaching) GetAppInfoReturns(result1 caching.App) {
	fake.GetAppInfoStub = nil
	fake.getAppInfoReturns = struct {
		result1 caching.App
	}{result1}
}

func (fake *FakeAppCaching) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllAppMutex.RLock()
	defer fake.getAllAppMutex.RUnlock()
	fake.getAppInfoMutex.RLock()
	defer fake.getAppInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAppCaching) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usageevents.AppCaching = new(FakeAppCaching)
